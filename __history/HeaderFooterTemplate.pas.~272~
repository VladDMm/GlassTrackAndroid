unit HeaderFooterTemplate;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes,
  System.Variants,System.Net.HttpClient,
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  FMX.Controls.Presentation, FMX.ListView.Types, FMX.ListView,
  FMX.ListView.Adapters.Base, System.RegularExpressions,
  System.Net.URLClient,
  System.JSON,FMX.DialogService,
  FMX.ListView.Appearances, IdHTTP, IdTCPClient, IdGlobal, FMX.Edit, FMX.Layouts, IdSSLOpenSSL,FMX.VirtualKeyboard, FMX.Platform;

type
  THeaderFooterForm = class(TForm)
    Header: TToolBar;
    HeaderLabel: TLabel;
    ListView1: TListView;
    SearchEdit: TEdit;
    Layout1: TLayout;
    procedure SearchEditChange(Sender: TObject);
//    procedure LoadButtonClick(Sender: TObject);
    procedure ListView1ItemClick(const Sender: TObject;
      const AItem: TListViewItem);
    procedure SearchEditClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormVirtualKeyboardShown(Sender: TObject;
      KeyboardVisible: Boolean; const Bounds: TRect);
    procedure FormVirtualKeyboardHidden(Sender: TObject;
      KeyboardVisible: Boolean; const Bounds: TRect);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  HeaderFooterForm: THeaderFooterForm;

implementation

{$R *.fmx}

function IsServerAvailable(const Host: string; Port: Integer): Boolean;
var
  TCPClient: TIdTCPClient;
begin
  Result := False;
  TCPClient := TIdTCPClient.Create(nil);
  try
    TCPClient.Host := Host;
    TCPClient.Port := Port;
    try
      TCPClient.ConnectTimeout := 3000; // Timp de așteptare 3 secunde
      TCPClient.Connect;
      Result := True;
    except
      on E: Exception do
      begin
        // Afișează mesaj de eroare folosind DialogService
        TDialogService.MessageDialog('Serverul nu este disponibil: ' + E.Message,
          TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], TMsgDlgBtn.mbOK, 0,
          procedure(const AResult: TModalResult)
          begin
            // Închide aplicația după ce utilizatorul apasă OK
            Application.Terminate;
          end);
      end;
    end;
  finally
    TCPClient.Free;
  end;
end;

function GetJSONValue(JSONObj: TJSONObject; const Key: string): string;
var
  JSONValue: TJSONValue;
begin
  JSONValue := JSONObj.GetValue(Key);
  if Assigned(JSONValue) then
    Result := JSONValue.Value
  else
    Result := 'N/A';
end;

 procedure THeaderFooterForm.FormCreate(Sender: TObject);
     var
  IdHTTPClient: TIdHTTP;
  response: string;
  jsonArray: TJSONArray;
  jsonValue: TJSONValue;
  searchText, url: string;
  listItem: TListViewItem;
begin
  searchText := Trim(SearchEdit.Text);
 // url := ('http://95.65.99.176:8080/api/products?search');
   url := ('http://172.16.0.66:8080/api/products?search');

  IdHTTPClient := TIdHTTP.Create(nil);
  try
    // Dacă folosești HTTPS, adaugă și setările pentru SSL
    IdHTTPClient.IOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(IdHTTPClient);

    try
      response := IdHTTPClient.Get(url);

      // Procesarea răspunsului JSON
      jsonArray := TJSONObject.ParseJSONValue(response) as TJSONArray;
      if Assigned(jsonArray) then
      begin
        ListView1.Items.Clear;

        // Iterează prin array-ul JSON și adaugă elemente în ListView
        for jsonValue in jsonArray do
        begin
          listItem := ListView1.Items.Add;
          listItem.Text := jsonValue.GetValue<string>('a_marca_model') + '    ' + jsonValue.GetValue<string>('cod');
          listItem.Detail := Format('Cod: %s, Celulă: %s, Preț: %s',
            [jsonValue.GetValue<string>('cod'),
             jsonValue.GetValue<string>('nume_celula'),
             jsonValue.GetValue<string>('p_price')]);
        end;
      end
      else
        ShowMessage('Răspunsul de la API nu este valid!');

    except
      on E: Exception do
        ShowMessage('Eroare la conectarea la API: ' + E.Message);
    end;

  finally
    IdHTTPClient.Free;
  end;
 end;

// procedure THeaderFooterForm.FormCreate(Sender: TObject);
//var
//  HttpClient: TIdHTTP;
//  Response: WideString;
//  JSONArray: TJSONArray;
//  JSONObject: TJSONObject;
//  I: Integer;
//begin
//  HttpClient := TIdHTTP.Create(nil);
// // IsServerAvailable('192.168.15.254', 80);
// if not IsServerAvailable('172.16.0.66', 80) then
//    Exit;
//  try
//    // Descarcă răspunsul de la server
//    Response := HttpClient.Get('http://172.16.0.66/api.php');
//
//    // Dacă răspunsul este în UTF-8, folosește TEncoding.UTF8
//    Response := TEncoding.UTF8.GetString(TEncoding.Default.GetBytes(Response));
//
//   // Response := TEncoding.GetEncoding(1251).GetString(TEncoding.Default.GetBytes(Response));
//
//    // Verifică dacă răspunsul este gol
//    if Response = '' then
//    begin
//      ShowMessage('Răspunsul de la server este gol!');
//      Exit;
//    end;
//
//    // Parsează răspunsul JSON
//    JSONArray := TJSONArray.ParseJSONValue(Response) as TJSONArray;
//    if Assigned(JSONArray) then
//    begin
//      ListView1.Items.Clear;
//
//      for I := 0 to JSONArray.Count - 1 do
//      begin
//        JSONObject := JSONArray.Items[I] as TJSONObject;
//        if Assigned(JSONObject) then
//        begin
//          with ListView1.Items.Add do
//          begin
//            Text := Format('%s' + '   ' +'%s', [GetJSONValue(JSONObject, 'a_marca_model'),
//            GetJSONValue(JSONObject, 'cod')]);
//
//            Detail := Format('Marca: %s' + sLineBreak + 'Cod: %s' + sLineBreak +
//              'Celula: %s' + sLineBreak + 'Cantitate: %s' + sLineBreak +
//              'Preţ: %s', [GetJSONValue(JSONObject, 'a_marca_model'),
//              GetJSONValue(JSONObject, 'cod'), GetJSONValue(JSONObject,
//              'nume_celula'), GetJSONValue(JSONObject, 'p_count'),
//              GetJSONValue(JSONObject, 'p_price')]);
//          end;
//        end
//        else
//          ShowMessage('Obiectul JSON nu conține date valide!');
//      end;
//    end
//    else
//      ShowMessage('Răspunsul JSON este invalid!');
//
//  except
//    on E: Exception do
//      ShowMessage('Eroare: ' + E.Message);
//  end;
//  HttpClient.Free;
//
//end;


//
procedure THeaderFooterForm.FormVirtualKeyboardShown(Sender: TObject; KeyboardVisible: Boolean;
  const Bounds: TRect);
var
  VKOffset: Single;
begin
  if KeyboardVisible then
  begin
    VKOffset := Bounds.Height;  // Înălțimea tastaturii virtuale
    Layout1.Margins.Bottom := VKOffset;  // Ajustează marginea de jos
    Application.ProcessMessages;  // Actualizează UI imediat
  end;
end;

procedure THeaderFooterForm.FormVirtualKeyboardHidden(Sender: TObject; KeyboardVisible: Boolean;
  const Bounds: TRect);
begin
  Layout1.Margins.Bottom := 0;  // Resetează marginea de jos
  Application.ProcessMessages;
end;

procedure THeaderFooterForm.ListView1ItemClick(const Sender: TObject;
  const AItem: TListViewItem);
begin
  ShowMessage(AItem.Detail); // Afișează conținutul detaliilor
end;

// bara cautare
procedure THeaderFooterForm.SearchEditChange(Sender: TObject);
var
  IdHTTPClient: TIdHTTP;
  response: string;
  jsonArray: TJSONArray;
  jsonValue: TJSONValue;
  searchText, url: string;
  listItem: TListViewItem;
begin
  searchText := Trim(SearchEdit.Text);
  //url := Format('http://192.168.15.254:8080/api/products?search=%s', [searchText]);
  url := Format('http://95.65.99.176:8080/api/products?search=%s', [searchText]);

  IdHTTPClient := TIdHTTP.Create(nil);
  try

    IdHTTPClient.IOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(IdHTTPClient);

    try
      response := IdHTTPClient.Get(url);

      // Procesarea răspunsului JSON
      jsonArray := TJSONObject.ParseJSONValue(response) as TJSONArray;
      if Assigned(jsonArray) then
      begin
        ListView1.Items.Clear;

        // Iterează prin array-ul JSON și adaugă elemente în ListView
        for jsonValue in jsonArray do
        begin
          listItem := ListView1.Items.Add;
          listItem.Text := jsonValue.GetValue<string>('a_marca_model') + '    '
           + jsonValue.GetValue<string>('cod');
          listItem.Detail := Format('Cod: %s, Celulă: %s, Preț: %s',
            [jsonValue.GetValue<string>('cod'),
             jsonValue.GetValue<string>('nume_celula'),
             jsonValue.GetValue<string>('p_price')]);
        end;
      end
      else
        ShowMessage('Răspunsul de la API nu este valid!');

    except
      on E: Exception do
        ShowMessage('Eroare la conectarea la API: ' + E.Message);
    end;

  finally
    IdHTTPClient.Free;
  end;
end;

procedure THeaderFooterForm.SearchEditClick(Sender: TObject);
begin
  SearchEdit.Text := '';
end;

end.
